//https://leetcode.com/problems/insert-into-a-binary-search-tree/
//Complete Java Program, comment accordingly to execute in leetcode.

import java.util.Arrays;

class TreeNode {
	      int val;
	      TreeNode left;
	      TreeNode right;
	      TreeNode() {}
	      TreeNode(int val) { this.val = val; }
	      TreeNode(int val, TreeNode left, TreeNode right) {
	          this.val = val;
	          this.left = left;
	          this.right = right;
	      }
	  }
	 //Definition for a binary tree node.
	 public class Solution {
		 
		 
			 TreeNode root;
			 Solution()
			 {
				 root=null;
			 }
			 
			 void insert(int val)
			 {
				 root=insertIntoBST(root, val);
			 }
			 
			 public TreeNode insertIntoBST(TreeNode root, int val)
			    {

			        /* If the tree is empty,
			           return a new node */
			        if (root == null) 
			        {
			            root = new TreeNode(val);
			            return root;
			        }

			        /* Otherwise, recur down the tree */
			        if (val < root.val)
			            root.left = insertIntoBST(root.left, val);
			        else if (val > root.val)
			            root.right = insertIntoBST(root.right, val);

			        /* return the (unchanged) node pointer */
			        return root;
			    }

			    // This method mainly calls InorderRec()
			    void inorder() 
			    { 
			         inorderRec(root); 
			    }

			    // A utility function to 
			    // do inorder traversal of BST
			    void inorderRec(TreeNode root)
			    {
			        if (root != null) {
			            inorderRec(root.left);
			            System.out.println(root.val);
			            inorderRec(root.right);
			        }
			    }

			 
			 
			 public static void main(String[] args)
			 {
				 Solution tree =new Solution();
				 tree.insert(50);
				 tree.insert(30);
				 tree.insert(20);
				 tree.insert(40);
				 tree.insert(70);
				 tree.insert(60);
				 tree.insert(80);
				 tree.inorder();
			 }
}
